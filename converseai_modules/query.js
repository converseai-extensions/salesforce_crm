/**
 * @file query.js
 * @author scott@converse.ai
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const ErrorResponse = require('@converseai/plugins-sdk').Payloads.ErrorResponse;
const Utils = require('../lib/utils.js');

module.exports = function query(app, body) {

  var moduleParam = body.payload.moduleParam;

  var startIndex = moduleParam.start_index;
  if (!startIndex) {
    startIndex = "0";
  }

  var maxResults = moduleParam.max_results;
  if (!maxResults) {
    maxResults = "10";
  }

  var tableName = moduleParam.table_name;
  if (!tableName) {
    app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", "No record name has been specified"));
    return;
  }

  var columnsString = "Id";
  var columns = moduleParam.columns;

  if (columns && columns.length > 0) {

    columnsString = "";

    for (var i = 0; i < columns.length; i++) {

      if (i > 0) {
        columnsString += ",";
      }

      columnsString += columns[i];
    }
  }

  var oauthToken = null;

  if (moduleParam.useProviderOAuth) {
    oauthToken = body.payload.providerOAuth;
    if (!oauthToken) {
      app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", "Needs valid provider plugin authentication"));
      return;
    }
  } else {
    oauthToken = body.payload.invokerOAuth;
    if (!oauthToken) {
      app.send(Status.NEED_AUTH, null);
      return;
    }
  }

  var conn = Utils.createConnection(oauthToken, body);
  if (conn.error != null) {
    if (conn.needAuth) {
      if (moduleParam.useProviderOAuth) {
        app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", "Needs valid provider plugin authentication"));
      } else {
        app.send(Status.NEED_AUTH, null);
      }
      return;
    }
    app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", conn.error));
    return;
  }

  var whereCondition = "";
  var conditions = moduleParam.query;
  if (conditions && conditions.length > 0) {
    whereCondition = " WHERE ";

    for (var i = 0; i < conditions.length; i++) {

      if (i > 0) {
        whereCondition += " AND ";
      }

      var condition = conditions[i];

      whereCondition += condition.column;

      switch (condition.condition) {
        case "IS_EQUAL_TO":
          whereCondition += " = ";
          break;
        case "IS_NOT_EQUAL_TO":
          whereCondition += " != ";
          break;
        case "IS_IN":
          whereCondition += " IN ";
          break;
        case "IS_NOT_IN":
          whereCondition += " NOT IN ";
          break;
        case "IS_LESS_THAN":
          whereCondition += " < ";
          break;
        case "IS_LESS_THAN_OR_EQUAL":
          whereCondition += " <= ";
          break;
        case "IS_GREATER_THAN ":
          whereCondition += " > ";
          break;
        case "IS_GREATER_THAN_OR_EQUAL":
          whereCondition += " >= ";
          break;
      }

      var addQuotes = true;

      if (condition.type == "BOOL" ||
        condition.type == "NUMBER") {
        addQuotes = false;
      }

      if (condition.value.length > 1) {
        whereCondition += "(";
        for (var j = 0; j < condition.value.length; j++) {
          if (j > 0) {
            whereCondition += ",";
          }

          if (addQuotes) {
            whereCondition += "'" + condition.value[j] + "'";
          } else {
            whereCondition += condition.value[j];
          }
        }
        whereCondition += ")";
      } else {
        if (addQuotes) {
          whereCondition += "'" + condition.value[0] + "'";
        } else {
          whereCondition += condition.value[0];
        }
      }
    }
  }

  var records = [];
  var queryString = "SELECT " + columnsString + " FROM " + tableName + whereCondition + " ORDER BY Id ASC LIMIT " + maxResults + " OFFSET " + startIndex;

  conn.query(queryString, function(err, result) {
    if (err) {
      if (err.name == "invalid_grant") {
        app.send(Status.NEED_AUTH, null);
        return;
      }
      var errString = "Query failed " + String(err);
      console.error(errString);
      app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", errString));
      return;
    }

    var response = new ModuleResponse();

    //response.setComment([]);
    response.setValue(result);

    app.send(Status.SUCCESS, response);

  });
};