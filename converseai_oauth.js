/**
 * @file converseai_providers.js
 * @author scott@converse.ai
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const OAuth2SetupDataResponse = require('@converseai/plugins-sdk').Payloads.OAuth2SetupDataResponse;
const OAuth2HandleCodeResponse = require('@converseai/plugins-sdk').Payloads.OAuth2HandleCodeResponse;
const ErrorResponse = require('@converseai/plugins-sdk').Payloads.ErrorResponse;
const Utils = require('./lib/utils.js');

/**
 * Triggers the OAuth2 process.
 */
var onOAuthStart = function(app, body) {

  var oauth2Uri = "https://login.salesforce.com/services/oauth2/authorize";

  var response = new OAuth2SetupDataResponse();

  var clientId = Utils.getClientId(body);

  response.setOAuth2URI(oauth2Uri);
  response.setClientID(clientId);
  response.setScope("full refresh_token offline_access");
  response.setState("");
  if (body.payload.registrationData.oauth) {
    response.setComment(body.payload.registrationData.oauth.start_message);
  }
  response.setExtraParams(null);

  app.send(Status.SUCCESS, response);
}

var onOAuthHandleCode = function(app, body) {

  if (body.isTest) {
    app.send(Status.SUCCESS, null);
    return
  }

  var code = body.payload.code;

  var conn = Utils.createConnection(null, body);
  if (conn.error != null) {
    app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", conn.error));
    return;
  }

  conn.authorize(code, function(err, userInfo) {
    if (err) {
      var errString = String(err);
      console.error(errString);
      app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", errString));
      return;
    }

    var response = new OAuth2HandleCodeResponse();

    response.setAccessToken(conn.accessToken);
    response.setRefreshToken(conn.refreshToken);
    response.setTokenType("Bearer");
    response.setExpiresIn(-1);
    response.setGrantType("authorization_code");

    if (conn.instanceUrl != "") {
      response.setMetadata({
        instanceUrl: conn.instanceUrl
      });
    }

    response.setMessage("Please return to your conversation");
    if (body.payload.registrationData.oauth) {
      if (body.payload.registrationData.oauth.redirect_url) {
        response.setMessage("");
        response.setRedirectURL(body.payload.registrationData.oauth.redirect_url);
      } else if (body.payload.registrationData.oauth.redirect_message) {
        response.setMessage(body.payload.registrationData.oauth.redirect_message);
      }
    }

    app.send(Status.SUCCESS, response);

  });
}

var onOAuthRenewToken = function(app, body) {
  // As we are setting expiresIn to -1 when creating the token, this should never be called
  app.send(Status.SUCCESS, null);
}

module.exports = {
  onOAuthStart: onOAuthStart,
  onOAuthHandleCode: onOAuthHandleCode,
  onOAuthRenewToken: onOAuthRenewToken
}
